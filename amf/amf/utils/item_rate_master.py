# my_app/my_app/utils/item_rate_export.py
from __future__ import annotations

import csv
import io
import statistics
from collections import defaultdict
from typing import Dict, List


import frappe
from frappe.utils import fmt_money, now_datetime


@frappe.whitelist()  # makes it callable from JS, REST, or "bench execute"
def export_item_rates_to_csv(
    invoice_doctype: str = "Sales Invoice",
    file_name: str | None = None,
    submitted_only: bool = True,
    company_currency: str | None = None,
) -> str:
    """
    Build a CSV of all item codes with every rate ever used plus an average column.

    Args:
        invoice_doctype: "Sales Invoice" (default) or "Purchase Invoice".
        file_name: Optional file name; autogenerated if omitted.
        submitted_only: If True, include only docstatus = 1 rows.
        company_currency: If given, convert rates before averaging
                          (requires 'base_rate' in query and multicurrency handling).

    Returns:
        The file URL of the newly inserted `File` document.
    """
    # ---------------------------------------------------------------------
    # 1. Fetch invoice-item rows
    # ---------------------------------------------------------------------
    filters = {}
    if submitted_only:
        filters["parent.docstatus"] = 1

    # child table is e.g. "Sales Invoice Item" or "Purchase Invoice Item"
    item_child_dt = f"{invoice_doctype} Item"

    # Using frappe.db.get_all would issue one query per page; a single SQL is faster
    rows = frappe.db.sql(
        f"""
        SELECT sii.item_code,
               sii.rate
        FROM `tab{item_child_dt}` AS sii
        INNER JOIN `tab{invoice_doctype}` AS si
            ON si.name = sii.parent
        {("WHERE si.docstatus = 1" if submitted_only else "")}
        ORDER BY si.creation
        """,
        as_dict=True,
    )

    # ---------------------------------------------------------------------
    # 2. Bucket rates by item
    # ---------------------------------------------------------------------
    item_rates: Dict[str, List[float]] = defaultdict(list)
    for r in rows:
        if not r.item_code:  # skip blank codes
            continue
        item_rates[r.item_code].append(float(r.rate or 0))

    if not item_rates:
        frappe.throw("No data found for the given criteria.")

    # ---------------------------------------------------------------------
    # 3. Determine max column width so every row has equal length
    # ---------------------------------------------------------------------
    max_count = max(len(rates) for rates in item_rates.values())

    # ---------------------------------------------------------------------
    # 4. Compose CSV in-memory
    # ---------------------------------------------------------------------
    header = ["Item Code", "Average"] + [f"Rate {i+1}" for i in range(max_count)]
    buf = io.StringIO()
    writer = csv.writer(buf)
    writer.writerow(header)

    for item_code, rates in sorted(item_rates.items()):
        avg = statistics.mean(rates)
        row = [item_code, fmt_money(avg)]
        row.extend(fmt_money(r) for r in rates)
        # pad the tail so every row matches header length
        row.extend([""] * (max_count - len(rates)))
        writer.writerow(row)

    csv_content = buf.getvalue()
    buf.close()

    # ---------------------------------------------------------------------
    # 5. Persist as a File doc (private by default)
    # ---------------------------------------------------------------------
    if not file_name:
        ts = now_datetime().strftime("%Y%m%d_%H%M%S")
        file_name = f"item_rates_{ts}.csv"

    file_doc = frappe.get_doc(
        {
            "doctype": "File",
            "file_name": file_name,
            "content": csv_content,
            "is_private": 1,
        }
    ).insert(ignore_permissions=True)

    frappe.db.commit()
    return file_doc.file_url

import frappe
import csv
import os
from frappe.utils import nowdate, get_site_path, flt

def export_item_last_rate_single_customer_csv():
    """
    Export only those items sold to exactly one customer,
    taking only the last (most recent) rate for each.
    - Column A: item_code
    - Column B: average(rate)  (== the last rate)
    - Column C: Rate 1         (the last rate)
    Saves to: /public/files/item_last_rate_<YYYY-MM-DD>.csv
    """

    # 1. Fetch all distinct item codes with at least one submitted invoice
    item_codes = frappe.db.sql_list("""
        SELECT DISTINCT item_code
        FROM `tabSales Invoice Item`
        WHERE docstatus = 1
        ORDER BY item_code
    """)

    data = {}  # will hold item_code → [last_rate]
    for code in item_codes:
        # 2. Find how many distinct customers bought this item
        customers = frappe.db.sql_list("""
            SELECT DISTINCT si.customer
            FROM `tabSales Invoice Item` AS sii
            JOIN `tabSales Invoice` AS si 
              ON si.name = sii.parent
            WHERE sii.item_code = %s
              AND si.docstatus = 1
        """, code)

        # Skip codes with multiple customers
        if len(customers) != 1:
            continue

        # 3. Grab the most recent rate for that single customer
        last_rate = frappe.db.sql("""
            SELECT sii.rate
            FROM `tabSales Invoice Item` AS sii
            JOIN `tabSales Invoice` AS si 
              ON si.name = sii.parent
            WHERE sii.item_code = %s
              AND si.docstatus = 1
            ORDER BY si.posting_date DESC, si.posting_time DESC
            LIMIT 1
        """, code, as_dict=True)

        if not last_rate:
            continue

        rate_val = flt(last_rate[0].rate)
        data[code] = [rate_val]

    # 4. Prepare CSV path
    fname = f"item_last_rate_{nowdate()}.csv"
    public_files = get_site_path("public", "files")
    os.makedirs(public_files, exist_ok=True)
    path = os.path.join(public_files, fname)

    # 5. Write CSV (only one rate column)
    headers = ["Item Code", "Average", "Rate 1"]
    with open(path, "w", newline="", encoding="utf-8") as fp:
        writer = csv.writer(fp)
        writer.writerow(headers)

        for code, rates in sorted(data.items()):
            avg = sum(rates) / len(rates) if rates else 0.0
            writer.writerow([
                code,
                "{:.2f}".format(avg),
                "{:.2f}".format(rates[0]) if rates else ""
            ])

    frappe.msgprint(f"✅ Exported filtered item‐rates CSV to: /files/{fname}")

import frappe
import csv
import os
from frappe.utils import nowdate, get_site_path, flt

def export_item_last_rate_csv():
    """
    Export a CSV of the last (most recent) unit-rate for each item.
    - Column A: Item Code
    - Column B: Average (== the last rate)
    - Column C: Rate 1 (== the last rate)
    Saves to: /public/files/item_last_rate_<YYYY-MM-DD>.csv
    """

    # 1. Get all distinct item codes from submitted Sales Invoices
    item_codes = frappe.db.sql_list("""
        SELECT DISTINCT item_code
        FROM `tabSales Invoice Item`
        WHERE docstatus = 1
        ORDER BY item_code
    """)

    data = {}
    for code in item_codes:
        # 2. Fetch the most recent rate for this item_code
        last = frappe.db.sql("""
            SELECT sii.rate
            FROM `tabSales Invoice Item` AS sii
            JOIN `tabSales Invoice`    AS si 
              ON si.name = sii.parent
            WHERE sii.item_code = %s
              AND si.docstatus = 1
            ORDER BY si.posting_date DESC, si.posting_time DESC
            LIMIT 1
        """, code, as_dict=True)

        if last:
            data[code] = flt(last[0].rate)

    # 3. Build CSV file path
    fname = f"item_last_rate_{nowdate()}.csv"
    public_files = get_site_path("public", "files")
    os.makedirs(public_files, exist_ok=True)
    full_path = os.path.join(public_files, fname)

    # 4. Write CSV
    with open(full_path, "w", newline="", encoding="utf-8") as fp:
        writer = csv.writer(fp)
        writer.writerow(["Item Code", "Average", "Rate 1"])
        for code, rate in sorted(data.items()):
            avg = rate  # only one rate, so average == rate
            writer.writerow([code, f"{avg:.2f}", f"{rate:.2f}"])

    frappe.msgprint(f"✅ Export complete: /files/{fname}")
